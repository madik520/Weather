{"version":3,"sources":["styles/img/icon.png","styles/img/sun.png","styles/img/sky-sun.png","components/header/header.jsx","components/search/search.jsx","components/data.js","components/cards/card.jsx","components/cards/sidebar-card.jsx","components/not-found/404.jsx","components/container/weather.jsx","components/footer/footer.jsx","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","Icon","alt","Search","value","onChange","onKeyPress","type","placeholder","defaultProps","KEY","API_WEATHER","Card","items","map","id","icon","description","name","temp","humidity","pressure","speed","key","SideBar","handleSendClick","i","onClick","NotFound","Weather","useState","text","setText","dataArr","setDataArr","sidebarArr","setSidebarArr","request","setRequest","sendQuery","query","a","fetch","resp","json","data","item","Date","getTime","weather","main","toFixed","wind","sidebarItem","Sun","target","SunSky","slice","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f2e2b4f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.6bd531c5.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.5585c03c.png\";","module.exports = __webpack_public_path__ + \"static/media/sky-sun.45cad5d5.png\";","import React from 'react';\r\nimport Icon from '../../styles/img/icon.png'\r\n\r\nconst Header = () => {\r\n    return(\r\n        <header>\r\n            <div className=\"icon-section\">\r\n                <img src={Icon} alt=\"icon\" />\r\n                <h1>Wellcome to Weather APP</h1>\r\n            </div>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Search = ({ value, onChange, onKeyPress }) => {\r\n    return(\r\n        <input \r\n        type=\"text\" \r\n        placeholder=\"Найди свой город\" \r\n        value={value} \r\n        onChange={onChange} \r\n        onKeyPress={onKeyPress} \r\n        />\r\n    )\r\n};\r\n\r\nSearch.propTypes = {\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    onKeyPress: PropTypes.func\r\n}\r\nSearch.defaultProps = {\r\n    value: \"\",\r\n    onChange: () => {},\r\n    onKeyPress: () => {}\r\n}\r\n\r\nexport default Search;","export const KEY = \"&appid=3baaceb5b5231055a73fe76199a98533\";\r\nexport const API_WEATHER = \"https://api.openweathermap.org/data/2.5/weather?\";\r\nexport const QUERY = \"q=\";\r\nexport const METRIC = \"&units=metric\";\r\nexport const ICON_API = \"http://openweathermap.org/img/wn/\";\r\nexport const ICON_SIZE = \"@2x.png\";\r\nexport const LANG = \"&lang=ru\";\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ICON_API, ICON_SIZE } from \"../data\";\r\n\r\n\r\nconst Card = ({ items }) => {\r\n    return(\r\n        <>\r\n            {items.map(({ id, icon, description, name, temp, humidity, pressure, speed }) => {\r\n                return <li key={id} className=\"card-item\">\r\n                        <div className=\"card-icon-block\">\r\n                            <img src={`${ICON_API}${icon}${ICON_SIZE}`} alt=\"icon\" />\r\n                            <span>{description}</span>\r\n                        </div>\r\n                        <div className=\"card-text\">\r\n                            <h2>Город: {name}</h2>\r\n                            <span>Температура: {temp}&deg;</span>\r\n                            <span>Влажность: {humidity}</span>\r\n                            <span>Давление: {pressure}</span>\r\n                            <span>Скорость ветра: {speed} м/с</span>\r\n                        </div>\r\n                </li>\r\n            })}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\n\r\nCard.propTypes = {\r\n    items: PropTypes.array\r\n}\r\nCard.defaultProps = {\r\n    items: []\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst SideBar = ({ items, handleSendClick }) => {\r\n    return(\r\n        <>\r\n        <h2 className=\"sidebar-history\">История поискa:</h2>\r\n        <ul className=\"sidebar-list\">\r\n            {items.map(({ name }, i) => {\r\n                return <li onClick={() => handleSendClick(name)} key={i + 1}>\r\n                {name}\r\n                </li>\r\n            })}\r\n        </ul>\r\n        </>\r\n    )\r\n};\r\n\r\nSideBar.propTypes = {\r\n    items: PropTypes.array,\r\n    onClick: PropTypes.func\r\n};\r\nSideBar.defaultProps = {\r\n    items: [],\r\n    onClick: () => {}\r\n};\r\n\r\nexport default SideBar;","import React from 'react';\r\n\r\nconst NotFound = () => (\r\n    <h1 className=\"not-found\">Мы не нашли Ваш город или вы допустили ошибку в названии :(</h1>\r\n);\r\n\r\nexport default NotFound;","import React, { useState } from 'react';\r\nimport Search from '../search/search';\r\nimport Sun from '../../styles/img/sun.png';\r\nimport SunSky from '../../styles/img/sky-sun.png';\r\nimport Card from '../cards/card';\r\nimport SideBar from '../cards/sidebar-card';\r\nimport NotFound from '../not-found/404';\r\nimport { KEY, API_WEATHER, QUERY, METRIC, LANG } from '../data';\r\n\r\n\r\nconst Weather = () => {\r\n    const [text, setText] = useState(\"\");\r\n    const [dataArr, setDataArr] = useState([]);\r\n    const [sidebarArr, setSidebarArr] = useState([]);\r\n    const [request, setRequest ] = useState(false);\r\n\r\n    const getQuery = ({ target: {value} }) => setText(value);\r\n\r\n    const sendQuery = async (query) => {\r\n        try{\r\n            const resp = await fetch(query);\r\n            const data = await resp.json();\r\n            let item = {\r\n            id: (new Date().getTime()),\r\n            name: data.name,\r\n            icon: data.weather[0].icon,\r\n            description: data.weather[0].description,\r\n            temp: +data.main.temp.toFixed(),\r\n            humidity: +data.main.humidity.toFixed(),\r\n            pressure: +data.main.pressure.toFixed(),\r\n            speed: +data.wind.speed.toFixed()\r\n            }\r\n        \r\n        const sidebarItem = {\r\n            name: data.name\r\n        }\r\n        setDataArr([item, ...dataArr]);\r\n        setSidebarArr([sidebarItem, ...sidebarArr]);\r\n        setRequest(false);\r\n        }catch(e){\r\n            setRequest(true);\r\n        }\r\n    }\r\n\r\n    const handlePress = ({ key }) =>{\r\n        if(key === \"Enter\"){\r\n            sendQuery(`${API_WEATHER}${QUERY}${text}${KEY}${METRIC}${LANG}`);\r\n            setText(\"\");\r\n        }\r\n    }\r\n\r\n    const handleSendClick = async (name) => {\r\n        try{\r\n            const resp = await fetch(`${API_WEATHER}${QUERY}${name}${KEY}${METRIC}${LANG}`);\r\n            const data = await resp.json();\r\n            let item = {\r\n            id: (new Date().getTime()),\r\n            name: data.name,\r\n            icon: data.weather[0].icon,\r\n            description: data.weather[0].description,\r\n            temp: +data.main.temp.toFixed(),\r\n            humidity: +data.main.humidity.toFixed(),\r\n            pressure: +data.main.pressure.toFixed(),\r\n            speed: +data.wind.speed.toFixed()\r\n        }\r\n        setDataArr([item, ...dataArr]);\r\n        setRequest(false);\r\n        }catch(e){\r\n            setRequest(true);\r\n        }\r\n\r\n    }\r\n    const clearHistory = () => {\r\n        setDataArr([]);\r\n    }\r\n    return(\r\n        <div className=\"weather-container\">\r\n            <div className=\"weather-header\">\r\n                <img src={Sun} alt=\"sun\" />\r\n                <Search onKeyPress={handlePress} onChange={getQuery} value={text} />\r\n                <img src={SunSky} alt=\"sun\" />\r\n            </div>\r\n            <div className=\"weather-sidebar\">\r\n                <SideBar handleSendClick={handleSendClick} items={sidebarArr.slice(0,5)} />\r\n            </div>\r\n            <div className=\"weather-main-conent\">\r\n                <button onClick={clearHistory} className=\"btn-clear\">Очистить поиск</button>\r\n                <ul className=\"card-list\">\r\n                    {request ? <NotFound /> : <Card items={dataArr.slice(0,4)} />}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Weather;","import React from 'react';\r\n\r\n\r\nconst Footer = () => (\r\n    <footer>\r\n        <div className=\"author\">\r\n            <p><span>&copy; 2020</span> Design & Programming Madik520 </p>\r\n        </div>\r\n    </footer>\r\n);\r\n\r\nexport default Footer;","import React from 'react';\nimport Header from './header/header';\nimport Weather from \"./container/weather\";\nimport Footer from \"./footer/footer\";\n\n\nconst App = () => {\n  return(\n    <div className=\"app\">\n      <div className=\"container\">\n        <Header />\n        <Weather />\n      </div>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}